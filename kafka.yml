services:
  zookeeper-1:
    image: confluentinc/cp-zookeeper:7.6.0
    user: "0:0"
    # ports:
    #   - "2181:2181"
    environment:
        ZOO_MY_ID: 1
        ZOOKEEPER_CLIENT_PORT: 2181
        ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log
    networks:
      - derive-network
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 20
        window: 120s
      placement:
        constraints:
          # - node.hostname == master-1
          - node.role == manager

  kafka-1:
    image: confluentinc/cp-kafka:7.6.0
    user: "0:0"
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka_kafka-1:19092,LISTENER_DOCKER_EXTERNAL://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "kafka_zookeeper-1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_LOG_RETENTION_HOURS: 72
      KAFKA_SEGMENT_BYTES: 100000000
    volumes:
      - kafka-1-data:/var/lib/kafka/data
    depends_on:
      - zookeeper-1
    networks:
      - derive-network
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
      placement:
        constraints:
          # - node.hostname == worker-1
          - node.role == worker

  kafka-2:
    image: confluentinc/cp-kafka:7.6.0
    user: "0:0"
    ports:
      - "9093:9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka_kafka-2:19093,LISTENER_DOCKER_EXTERNAL://0.0.0.0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "kafka_zookeeper-1:2181"
      KAFKA_BROKER_ID: 2
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_LOG_RETENTION_HOURS: 72
      KAFKA_SEGMENT_BYTES: 100000000
    volumes:
      - kafka-2-data:/var/lib/kafka/data
    depends_on:
      - zookeeper-1
    networks:
      - derive-network
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
      placement:
        constraints:
          # - node.hostname == worker-1
          - node.role == worker

  kafka-3:
    image: confluentinc/cp-kafka:7.6.0
    user: "0:0"
    restart: always
    ports:
      - "9094:9094"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka_kafka-3:19094,LISTENER_DOCKER_EXTERNAL://0.0.0.0:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "kafka_zookeeper-1:2181"
      KAFKA_BROKER_ID: 3
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_LOG_RETENTION_HOURS: 72
      KAFKA_SEGMENT_BYTES: 100000000
    volumes:
      - kafka-3-data:/var/lib/kafka/data
    depends_on:
      - zookeeper-1
    networks:
      - derive-network
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
      placement:
        constraints:
          # - node.hostname == worker-2
          - node.role == worker

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    # ports:
    #   - 19000:9000
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    environment:
      KAFKA_BROKERCONNECT: kafka_kafka-1:9092,kafka_kafka-2:9093,kafka_kafka-3:9094
      TZ: "Asia/Bangkok"
      SERVER_SERVLET_CONTEXTPATH: "/kafdrop"
    networks:
      - derive-network
      - traefik_traefik-public
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.kafdrop.rule=PathPrefix(`/kafdrop`)"
        - "traefik.http.services.kafdrop.loadbalancer.server.port=9000"
        - "traefik.docker.network=traefik_traefik-public"

volumes:
  zookeeper-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /media/psf/NFS/zookeeper-data
  zookeeper-log:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /media/psf/NFS/zookeeper-log
  kafka-1-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /media/psf/NFS/kafka-1-data
  kafka-2-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /media/psf/NFS/kafka-2-data
  kafka-3-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /media/psf/NFS/kafka-3-data

networks:
  derive-network:
    driver: overlay
  traefik_traefik-public:
    external: true